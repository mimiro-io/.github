name: Reusable CI workflow for Docker Build & Push to ECR

on:
  workflow_call:
    inputs:
      name: 
        description: "Application Name overwrite (Default is the github repo name)"
        required: false
        type: string
        default: ${{ github.event.repository.name  }}
      trivy_exit_code:
        description: "if set to 0, workflow will ignore trivy scan errors.(not recommended)"
        required: false
        type: number
        default : 1
      skip_docker:
        description: "if set to true, workflow will skip docker build and ECR push"
        required: false
        type: boolean
        default : false
      skip_irsa:
        description: "if set to true, workflow will skip IRSA"
        required: false
        type: boolean
        default : false
      iam_policies_json_file:
        description: "relative path to iam policy json. default is ./ci/policies.json"
        required: false
        type: string
        default : './ci/policies.json'
    secrets:
      ECR_REPO_POLICY:
        required: true
        
jobs:
  ECR:
    name: ECR
    runs-on: ops
    if : inputs.skip_docker == false
    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-1
      
      - name: Create/Verify Amazon ECR repo
        id: create-ecr-repo
        uses: int128/create-ecr-repository-action@v1
        with:
          repository: ${{ inputs.name  }}  

      - name: Update ECR Repo Policy
        id: update-ecr-repo-policy
        run: |
          aws ecr set-repository-policy --policy-text ${{ secrets.ECR_REPO_POLICY }}  --repository-name ${{ inputs.name  }}
      
      - name: Update ECR Lifecycle Policy
        id: update-ecr-lifecycle-policy
        run: |
          aws ecr put-lifecycle-policy --repository-name ${{ inputs.name  }} --lifecycle-policy-text \
            "{\"rules\":[{\"rulePriority\":1,\"description\":\"Expire untagged images\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"sinceImagePushed\",\"countUnit\":\"days\",\"countNumber\":1},\"action\":{\"type\":\"expire\"}},{\"rulePriority\":2,\"description\":\"Expire old images with default tag\",\"selection\":{\"tagStatus\":\"tagged\",\"tagPrefixList\":[\"master-\"],\"countType\":\"imageCountMoreThan\",\"countNumber\":50},\"action\":{\"type\":\"expire\"}}]}",


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
                 
      - name: Set Default Image Tag
        id: set_default_tag
        run: |
          export GIT_BRANCH=$(echo ${{ github.ref }} | cut -d / -f 3)
          export GIT_SHORT_SHA=$(git rev-parse --short HEAD)
          echo ::set-output name=default_tag::${{ steps.login-ecr.outputs.registry }}/${{ inputs.name  }}:$GIT_BRANCH-$GIT_SHORT_SHA-$(date +%s)
        
      - name: Show Default Tag
        run: echo "${{ steps.set_default_tag.outputs.default_tag }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
            
      - name: Docker Build
        id: docker_build
        run: |
          docker build . -t ${{ steps.set_default_tag.outputs.default_tag }}

      - name: Trivy vulnerability scan
        uses : aquasecurity/trivy-action@master
        with :
          image-ref: "${{ steps.set_default_tag.outputs.default_tag }}"
          format: 'table'
          exit-code: ${{ inputs.trivy_exit_code }}
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
    

      - name: Push Latest Docker Image to ECR
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        id: docker_push
        uses: docker/build-push-action@v2
        env:
          IMAGE_TAG_1: ${{ steps.set_default_tag.outputs.default_tag }}
          IMAGE_TAG_2: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.name  }}:latest
        with:
          push: true
          tags: ${{env.IMAGE_TAG_1}},${{env.IMAGE_TAG_2}}

      - name: Get Release Tag
        if: github.event_name == 'release'
        id: get_tag
        run: echo ::set-output name=tag::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Push Image with Release Tag to ECR for published release
        if: github.event_name == 'release' && github.event.action == 'published'
        id: docker_push_release
        uses: docker/build-push-action@v2
        env:
          IMAGE_TAG_1: ${{ steps.set_default_tag.outputs.default_tag }}
          IMAGE_TAG_2: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.name  }}:latest
          IMAGE_TAG_3: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.name  }}:${{ steps.get_tag.outputs.tag }}
        with:
          push: true
          tags: ${{env.IMAGE_TAG_1}},${{env.IMAGE_TAG_2}},${{env.IMAGE_TAG_3}}

  IRSA-DEV:
    name: IRSA-DEV
    runs-on : dev  
    if : inputs.skip_irsa == false
    steps:
      - name: Checkout
        uses: actions/checkout@v2  

      - name : checkout mimiro-io/.github
        uses: actions/checkout@v2
        with:
          repository: mimiro-io/.github
          ref: main
          path: ./reusable-flow/
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-1
     
      - name: Validate IAM Policy Json
        run: |
            if [ -f ${{ inputs.iam_policies_json_file }} ]; then              
              
              validation_result=aws accessanalyzer validate-policy \
                 --policy-type IDENTITY_POLICY \
                 --policy-document ${{ inputs.iam_policies_json_file }}

              if [ echo $validation_result | grep ERROR ]; then
                echo "ERRORs in policy file ${{ inputs.iam_policies_json_file }}"
                echo $validation_result
              else
                echo "Policy. Okay!"
              fi
              
            else 
              echo "IAM Policy does not exist. skipping validation"              
            fi   

      - name: IAM Role for Service Account
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          python3 -m pip install boto3
          python3 --version          
          CUSTOM_POLICY=./ci/policies.json
          if [ -f "$CUSTOM_POLICY" ]; then
              echo "$CUSTOM_POLICY exists. will be attached as inline policy to Role"
              python3 ./reusable-flow/script/setup-iam.py \
              --iam-policy-file="$CUSTOM_POLICY" \
              --app-name=${{ inputs.name  }}          
          else 
              echo "$CUSTOM_POLICY does not exist. No policy will be attached to the role "
              python3 ./reusable-flow/script/setup-iam.py \
              --app-name=${{ inputs.name  }}  
          fi
          

  IRSA-PROD:
    name: IRSA-PROD
    needs: IRSA-DEV
    runs-on : prod   
    if : inputs.skip_irsa == false
    steps:
      - name: Checkout
        uses: actions/checkout@v2  

      - name : checkout mimiro-io/.github
        uses: actions/checkout@v2
        with:
          repository: mimiro-io/.github
          ref: main
          path: ./reusable-flow/
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-1

      - name: Validate IAM Policy Json
        run: |
          aws --version

          if [ -f ${{ inputs.iam_policies_json_file }} ]; then
              aws accessanalyzer validate-policy --policy-type RESOURCE_POLICY --policy-document file://ci/policies.json
          else 
              echo "IAM Policy does not exist. skipping validation"              
          fi  

      - name: IAM Role for Service Account
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          python3 -m pip install boto3
          python3 --version 
          if [ -f ${{ inputs.iam_policies_json_file }} ]; then
              echo "IAM policy exists. will be attached as inline policy to Role"
              python3 ./reusable-flow/script/setup-iam.py \
              --iam-policy-file="$CUSTOM_POLICY" \
              --app-name=${{ inputs.name  }}          
          else 
              echo "$CUSTOM_POLICY does not exist. No policy will be attached to the role "
              python3 ./reusable-flow/script/setup-iam.py \
              --app-name=${{ inputs.name  }}  
          fi
        

