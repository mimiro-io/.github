name: Reusable workflow for building an pushing Docker images to Docker Hub

on:
  workflow_call:
    inputs:
      name:
        description: "Name of the Docker Hub repository (Default is the GithHb repo name)"
        required: false
        type: string
        default: ${{ github.event.repository.name }}
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  docker:
    runs-on: ops
    outputs:
      image_tag: ${{ steps.image_tag.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx (enable caching)
        uses: docker/setup-buildx-action@v1

      - name: install semver tool
        run: pip3 install semver

      - name: validate release tag
        run: |
          if [ ${{ github.event_name }} == 'release' ]
          then
            echo "Validate that release tag is valid semver"
            pysemver check $(echo $GITHUB_REF | cut -d / -f 3)
          fi
      - name: get next version
        id: semver-tag
        run: |
          git fetch --all --tags
          DESCRIBE=$( git describe --always --tags --long --first-parent )
          VERSION=$(echo $DESCRIBE | cut -d "-" -f 1)
          NEXT=$( pysemver bump patch $VERSION )
          echo "::set-output name=tag::$NEXT"
      - name: "Calculated unstable tag"
        run: echo "base tag next unstable version... ${{ steps.semver-tag.outputs.tag }}"

      - name: Set Image Tag
        id: image_tag
        run: |
          if [ ${{ github.event_name }} == 'release' ]
          then
            echo "Setting Stable Image Tag"
            echo ::set-output name=image_tag:: ${{ inputs.name }}:$(echo $GITHUB_REF | cut -d / -f 3)
          else
            echo "Setting Unstable Image"
            echo ::set-output name=image_tag:: ${{ inputs.name }}:${{ steps.semver-tag.outputs.tag }}-$GITHUB_RUN_NUMBER-unstable
          fi

      # Login to Docker registry except on PR
      - name: Login to DockerHub
        id: docker_login
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.image_tag.outputs.image_tag }}

      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.image_tag.outputs.image_tag }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push Image to DockerHub
        id: dockerhub_push
        if: |
          (
            ( github.ref == 'refs/heads/master' && github.event_name == 'push' )
            ||
            ( github.event_name == 'release')
          )
            &&
          ( github.event_name != 'pull_request')
        run: |
          docker image push ${{ steps.image_tag.outputs.image_tag }}
      - name: Tag latest if release
        id: dockerhub_latest
        if: github.event_name == 'release'
        run: |
          docker ${{ steps.image_tag.outputs.image_tag }} ${{ inputs.name }}:latest
          docker push ${{ inputs.name }}:latest
