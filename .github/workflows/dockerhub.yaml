name: Reusable workflow for building an pushing Docker images to Docker Hub

on:
  workflow_call:
    inputs:
      name:
        description: "Name of the Docker Hub repository (Default is the GithHb repo name)"
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      version_file:
        description: "Output file path for writing semver version to file"
        required: false
        type: string
        default: VERSION.json
      platforms:
        description: "Platforms to build for (comma-separated, e.g. 'linux/amd64,linux/arm64')"
        required: false
        type: string
        default: "linux/amd64,linux/arm64"
      strip_v_prefix:
        description: "Whether to strip 'v' prefix from version tags (true/false)"
        required: false
        type: boolean
        default: true
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install semver tool
        run: pip3 install semver

      - name: Validate release tag
        if: github.event_name == 'release'
        run: |
          TAG_VERSION=$(echo $GITHUB_REF | cut -d / -f 3)

          if [[ "${{ inputs.strip_v_prefix }}" == "true" && "$TAG_VERSION" == v* ]]; then
            TAG_VERSION="${TAG_VERSION:1}"
          fi

          pysemver check $TAG_VERSION

          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV

      - name: Set Image Tag
        id: image_tag
        run: |
          if [ ${{ github.event_name }} == 'release' ]
          then
            echo "Setting Stable Image Tag"
            echo "image_tag=${{ inputs.name }}:$TAG_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Setting Unstable Image tag"
            git fetch --all --tags
            DESCRIBE=$( git describe --always --tags --long --first-parent )
            VERSION=$(echo $DESCRIBE | cut -d "-" -f 1)

            if [[ "${{ inputs.strip_v_prefix }}" == "true" && "$VERSION" == v* ]]; then
              VERSION="${VERSION:1}"
            fi

            NEXT=$( pysemver bump patch $VERSION )
            echo "image_tag=${{ inputs.name }}:$NEXT-$GITHUB_RUN_NUMBER-unstable" >> $GITHUB_OUTPUT
          fi

      - name: Show image tag
        run: echo "${{ steps.image_tag.outputs.image_tag }}"

      - name: Write version file
        run: |
          versionTag=${{ steps.image_tag.outputs.image_tag }}
          JSON_STRING=$( jq -n \
                  --arg ver "$versionTag" \
                  --arg sha "${GITHUB_SHA::7}" \
                  --arg date "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
                  '{version: $ver, commit: $sha, build_date: $date}' )
          echo "$JSON_STRING" > "${{ inputs.version_file }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: cloud
          endpoint: "mimiro/docker-build-cloud"
          install: true

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ inputs.platforms }}
          tags: ${{ steps.image_tag.outputs.image_tag }}
          outputs: |
            type=cacheonly
            type=local,dest=${{ runner.temp }}/docker-build-output

      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        env:
          TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db,public.ecr.aws/aquasecurity/trivy-db
          TRIVY_JAVA_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-java-db,public.ecr.aws/aquasecurity/trivy-java-db
        with:
          scan-type: 'rootfs'
          scan-ref: ${{ runner.temp }}/docker-build-output
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Build and push
        if: |
          (
            ( github.ref == 'refs/heads/master' && github.event_name == 'push' )
            ||
            ( github.event_name == 'release')
          )
            &&
          ( github.event_name != 'pull_request')
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ inputs.platforms }}
          provenance: mode=max
          sbom: true
          tags: |
            ${{ steps.image_tag.outputs.image_tag }}
            ${{ github.event_name == 'release' && format('{0}:latest', inputs.name) || null }}
          outputs: 'type=registry'