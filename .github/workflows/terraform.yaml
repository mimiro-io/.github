---
name: Reusable CI workflow for Terraform

on:
  workflow_call:
    inputs:
      command:
        description: "terraform command (Default is the plan)"
        required: false
        type: string
        default: 'plan'
      environment:
        description: "environment (Default is dev)"
        required: false
        type: string
        default: 'dev'
      name:
        description: "Infra Name (Default is the github repo name)"
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      aws_region:
        description: "AWS Region Name overwrite (Default is eu-west-1)"
        required: false
        type: string
        default: 'eu-west-1'
      terraform_version:
        description: "Terraform version overwrite (Default 1.1.1)"
        required: false
        type: string
        default: '1.1.1'
      terraform_working_dir:
        description: "terraform dir path in repo.Default is ./terraform"
        required: false
        type: string
        default: './terraform'
      terraform_backend_bucket:
        description: "Terraform backend bucket name"
        required: true
        type: string
      terraform_backend_dynamoDB:
        description: "Terraform backend dynamodbTable name"
        required: true
        type: string

jobs:
  terraform:
    name: ${{ inputs.environment }}

    runs-on: ${{ inputs.environment }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.terraform_working_dir }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
              -backend-config=bucket=${{ inputs.terraform_backend_bucket }}
              -backend-config=dynamodb_table=${{ inputs.terraform_backend_dynamoDB }}
              -backend-config=key=infrastructure/${{ inputs.name }}
              -backend-config=region=${{ inputs.aws_region }}
              -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan
              -var env=${{ inputs.environment }}
              -var region=${{ inputs.aws_region }}
              -out tfplan
        continue-on-error: false

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' &&  inputs.command == 'apply'
        run: terraform apply  -auto-approve tfplan

      - name: Terraform Destroy Plan
        if: inputs.command  == 'destroy-plan'
        run: terraform plan -destroy
              -var env=${{ inputs.environment }}
              -var region=${{ inputs.aws_region }}

      - name: Terraform Destroy
        if: inputs.command  == 'destroy'
        run: terraform apply -destroy  -auto-approve
              -var env=${{ inputs.environment }}
              -var region=${{ inputs.aws_region }}
